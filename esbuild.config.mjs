import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs";
import path from "path";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";

// Make sure dist directory exists
if (!fs.existsSync("dist")) {
  fs.mkdirSync("dist");
}

// Copy manifest.json to dist folder
fs.copyFileSync("manifest.json", "dist/manifest.json");
fs.copyFileSync(".gitignore", "dist/.gitignore");

// Copy versions.json to dist folder if exists
if (fs.existsSync("versions.json")) {
  fs.copyFileSync("versions.json", "dist/versions.json");
}

// Copy README.md to dist folder
if (fs.existsSync("README.md")) {
  fs.copyFileSync("README.md", "dist/README.md");
}

const context = await esbuild.context({
  banner: {
    js: banner,
  },
  entryPoints: ["src/main.ts"],
  bundle: true,
  external: [
    "obsidian",
    "electron",
    "@codemirror/autocomplete",
    "@codemirror/collab",
    "@codemirror/commands",
    "@codemirror/language",
    "@codemirror/lint",
    "@codemirror/search",
    "@codemirror/state",
    "@codemirror/view",
    "@lezer/common",
    "@lezer/highlight",
    "@lezer/lr",
    ...builtins,
  ],
  format: "cjs",
  target: "es2018",
  logLevel: "info",
  sourcemap: prod ? false : "inline",
  treeShaking: true,
  outfile: "dist/main.js",
  plugins: [
    {
      name: 'node-globals',
      setup(build) {
        // Define global process variable for node packages
        build.onResolve({ filter: /^process$/ }, args => {
          return { path: args.path, namespace: 'node-globals' };
        });
        build.onLoad({ filter: /.*/, namespace: 'node-globals' }, () => {
          return {
            contents: `
              export const env = { 
                ALI_AK: '${process.env.ALI_AK || ''}',
                ALI_SK: '${process.env.ALI_SK || ''}'
              };
              export default { env };
            `,
            loader: 'js'
          };
        });
      }
    }
  ]
});

if (prod) {
  await context.rebuild();
  process.exit(0);
} else {
  await context.watch();
} 